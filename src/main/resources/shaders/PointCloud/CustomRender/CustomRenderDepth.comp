#version 450

#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_NV_shader_atomic_int64 : enable

layout(local_size_x = 1024) in;

layout (std430, binding = 0) buffer Points {
    vec3 points[]; // Output vertices
};

layout (std430, binding = 3) buffer depthBuffer {
    uint ssDepthBuffer[]; // Output vertices
};

uniform mat4 view;
uniform mat4 projection;
uniform ivec2 resolution;
uniform int pointCount;


void main(){

    uint globalID = gl_GlobalInvocationID.x;
    if (globalID > pointCount) return;


    vec4 pos = projection * view * vec4(points[globalID], 1.0);
    pos.xyz = pos.xyz / pos.w;

    if(pos.w <= 0.0 || pos.x < -1.0 || pos.x > 1.0 || pos.y < -1.0 || pos.y > 1.0){
        return;
    }

    vec2 imgPos = (pos.xy * 0.5 + 0.5) * resolution;
    ivec2 pixelCoords = ivec2(imgPos);
    int pixelID = pixelCoords.x + pixelCoords.y * resolution.x;

    uint depth = floatBitsToUint(pos.w);
    uint old = ssDepthBuffer[pixelID];

    if(depth < old){
        atomicMin(ssDepthBuffer[pixelID], depth);
    }

}