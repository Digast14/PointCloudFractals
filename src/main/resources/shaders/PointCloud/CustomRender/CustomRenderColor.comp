#version 450

#extension GL_ARB_gpu_shader_int64: enable
#extension GL_NV_shader_atomic_int64: enable
#extension GL_NV_gpu_shader5: enable
#extension GL_NV_shader_thread_group: require
#extension GL_NV_shader_thread_shuffle: require
#extension GL_ARB_shader_group_vote: require
#extension GL_ARB_shader_ballot: require

layout(local_size_x = 1024) in;


struct customVec3 {
    float x;
    float y;
    float z;
};

layout (std430, binding = 0) buffer Points {
    customVec3 points[];
};

layout (std430, binding = 5) buffer Points2 {
    customVec3 points2[];
};

layout (std430, binding = 1) buffer NormalBuffer {
    customVec3 normals[];
};

layout (std430, binding = 6) buffer NormalBuffer2 {
    customVec3 normals2[];
};


layout (std430, binding = 3) buffer depthBuffer {
    uint ssDepthBuffer[]; // Output vertices
};

layout (std430, binding = 4) buffer screenSpaceRedGreen {
    int64_t ssRGBA[]; // Output vertices
};


uniform mat4 view;
uniform mat4 projection;
uniform ivec2 resolution;
uniform int pointCount;


void main() {
    uint globalID = gl_GlobalInvocationID.x;
    if (globalID > pointCount) return;

    //depth pass
    vec4 posPoint;
    vec3 normal;
    if(globalID < 357913941){
        posPoint = vec4(vec3(points[globalID].x,points[globalID].y,points[globalID].z), 1.0);
        normal = vec3(normals[globalID].x,normals[globalID].y,normals[globalID].z);
    }else{
        globalID -= 357913941;
        posPoint = vec4(vec3(points2[globalID].x,points2[globalID].y,points2[globalID].z), 1.0);
        normal = vec3(normals2[globalID].x,normals2[globalID].y,normals2[globalID].z);
    }


    vec4 pos = projection * view * posPoint;
    pos.xyz = pos.xyz / pos.w;

    if(pos.w <= 0.0 || pos.x < -1.0 || pos.x > 1.0 || pos.y < -1.0 || pos.y > 1.0){
        return;
    }

    vec2 imgPos = (pos.xy * 0.5 + 0.5) * resolution;
    ivec2 pixelCoords = ivec2(imgPos);
    int pixelID = pixelCoords.x + pixelCoords.y * resolution.x;

    float depth = pos.w;
    float bufferedDepth = uintBitsToFloat(ssDepthBuffer[pixelID]);

    //color pass
    ivec3 color = ivec3(int(normal.r * 255), int(normal.g * 255), int(normal.b * 255));

    if (depth <= bufferedDepth * 1.01) {
        int64_t r = clamp(color.r,0,255);
        int64_t g = clamp(color.g,0,255);
        int64_t b = clamp(color.b,0,255);

        int64_t rg = (r << 32) | g;
        int64_t ba = (b << 32) | 1;

        atomicAdd(ssRGBA[2 * pixelID + 0], rg);
        atomicAdd(ssRGBA[2 * pixelID + 1], ba);

    }
}
