#version 430 core

layout(local_size_x = 256) in;

struct Point {
    vec4 position;
    uint mortonCode;
};

layout (std430, binding = 0) buffer Points {
    Point points[]; // Output vertices
};


layout(std430, binding = 5) buffer OutputBuffer {
    Point sortedData[];
};

shared uint localHistogram[16]; // 16 bins for 4-bit radix sorting
shared uint localOffsets[16];

uniform int passCount;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint localIdx = gl_LocalInvocationID.x;
    uint groupSize = gl_WorkGroupSize.x;

    // Initialize shared memory
    if (localIdx < 16) {
        localHistogram[localIdx] = 0;
    }
    barrier();

    // Extract key (Z-order)
    uint key = uint(points[idx].mortonCode);
    uint digit = (key >> passCount*4) & 0xF; // Extract lowest 4 bits

    // Histogram computation
    atomicAdd(localHistogram[digit], 1);
    barrier();

    // Exclusive prefix sum (naive version for now)
    if (localIdx == 0) {
        uint sum = 0;
        for (int i = 0; i < 16; i++) {
            uint temp = localHistogram[i];
            localOffsets[i] = sum;
            sum += temp;
        }
    }
    barrier();

    // Scatter elements to correct positions
    uint newIndex = localOffsets[digit]++;
    sortedData[newIndex] = points[idx];

    barrier();

    points[idx] = sortedData[idx];
}
